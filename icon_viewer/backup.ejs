<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Icon Viewer</title>
    <link rel="stylesheet" href="./styles.css" type="text/css">
</head>
<body>
    <section class="hero">
        <h3 class="hero-title">Vue Icons Preview</h3>
        <input type="search" placeholder="Search for icon..." id="search-input">
    </section>
    <div id="results-container" class="icons-container" style="background-color: bisque;">

    </div>
    <div class="icons-container">
        <% for(var i=0; i < icons.length; i++) { %>
            <div class="icon-wrapper">
                <span><%= icons[i].split('/')[1].split('.')[0] %></span>
                <img src="<%= icons[i] %>" alt="<%= icons[i] %>">
            </div>
        <% } %>
    </div>

    <script>
        let placeholder = <%- JSON.stringify(icons) %>;
        let icons =[]
        let search_results = []
        let results_container = document.getElementById('results-container')
        const limit_count = 5
        placeholder.forEach(element => {
            icons.push({name:element.split('/')[1].split('.')[0], path:element})
        });
        delete placeholder
        let search_input = document.getElementById('search-input')
        search_input.addEventListener('input', ()=>{
            if(search_input.value == '')removeAllChildNodes(results_container);
            if (search_results.length > limit_count){
                search_results.splice(0, search_results.length-limit_count)
                cleanUpResults();
            }
            if(search_input.value != '')findMatch(search_input.value);

        })
        function findMatch(value){
             icons.map((icon)=>{
                 if (icon.name.includes(value))//regex better
                //  search_results = [].concat(icon)
                // if(search_results.indexOf(icon) == -1)
                // console.log(search_results.includes(icon))
                 search_results.push(icon)
                 
             })    
                //plot match
                plotMatches()
        }
        function removeAllChildNodes(parent) {
            while (parent.firstChild) {
                parent.removeChild(parent.firstChild);
            }
        }
        function cleanUpResults(){
            if(results_container.childElementCount > limit_count)
            for (let index = 0; index < results_container.childElementCount-limit_count; index++) {
                results_container.removeChild(results_container.childNodes[index])
            }
        }

        function plotMatches(){
            //  let unique_results = [...new Set(search_results)];
            search_results.slice(Math.max(search_results.length - limit_count, 1)).forEach((icon)=>{
                
                let result_div = document.createElement('div')
                result_div.setAttribute('class', 'icon-wrapper')
                let result_img = document.createElement('img')
                 result_div.innerHTML = icon.name
                 result_img.setAttribute('src', icon.path)
                 result_div.appendChild(result_img)
                //  removeAllChildNodes(results_container)
                 results_container.appendChild(result_div)
                 // cleanup

             })
        }
      </script>
</body>
</html>