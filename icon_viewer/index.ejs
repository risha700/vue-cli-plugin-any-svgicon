<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Icon Viewer</title>
    <link rel="stylesheet" href="./styles.css" type="text/css">
</head>
<body>
    <span id='github-star'>
        <iframe src="https://ghbtns.com/github-btn.html?user=risha700&repo=vue-cli-plugin-any-svgicon&type=star&count=false&size=large" frameborder="0" scrolling="0" width="170" height="30" title="GitHub"></iframe>
    </span>
    <div class="stats" ></div>
    <section class="hero">
        <h3 class="hero-title">Vue Icons Preview</h3>
        <input type="search" placeholder="Loading icons..." id="search-input" autofocus>
    </section>
    <div id="results-container" class="icons-container" style="background-color: #D8C3B1;"></div>

    <script type="module">

        let search_results = []
        let results_container = document.getElementById('results-container')
        let search_input = document.getElementById('search-input')
        let filter_instance
        import SearchFilter from './search.js'
        
        function createIconContainer(){
            let icon_container = document.createElement('div')
            icon_container.setAttribute('class', 'icons-container')
            document.body.appendChild(icon_container)
            return icon_container
        }

        function createIconMarkup(icon, container, src=false){
            let icon_wrapper = document.createElement('div')
            icon_wrapper.setAttribute('class', 'icon-wrapper')
            let icon_obj= document.createElement('img')
            let icon_name = document.createElement('span')
            icon_name.innerHTML = icon.name
            icon_wrapper.appendChild(icon_name)
            icon_obj.setAttribute('src', icon.static_url)
            icon_obj.setAttribute('loading', 'lazy')
            icon_wrapper.appendChild(icon_obj)
            applyIconAttributes(icon_wrapper, src)
            // icon_obj.addEventListener('load',()=>{forceStylingObjSvg(icon_obj)})
            container.appendChild(icon_wrapper)

        }
        const forceStylingObjSvg = (svg)=>{
            // refrain from html objects for performance
            svg.contentDocument.firstElementChild.setAttribute('fill','#B68E6D')
        }

        function applyIconAttributes(elm, src=true){
            if(src){
                filter_instance.importToSpriteMarkup([elm])
                elm.setAttribute('type', 'src-icon')

            }else{
                filter_instance.addClipboard([elm])
                elm.setAttribute('type', 'sprite-icon')
            }
            filter_instance.addDeleteButton([elm])
            filter_instance.addRenameButton([elm])
        }
        (async function(){
            let container = createIconContainer()
            let data = await fetch('icons')
            let src_data = await fetch('src')
            let {icons} = await data.json()
            let {src_icons} = await src_data.json()
            let src_only_icons = []
            src_icons.map((s_icon) => {
                const old_icon_index = icons.findIndex(item => item.name === s_icon.name)
                if(old_icon_index === -1)
                src_only_icons.push(s_icon)
                
            })
            search_input.setAttribute('placeholder', `Search ${icons.length+src_icons.length} icons...`)
            filter_instance = new SearchFilter(src_only_icons.concat(icons), search_input, results_container).init()
            
            icons.map((icon) => {createIconMarkup(icon, container)});
            src_only_icons.map((icon) => {createIconMarkup(icon, container, true)});

        })();



      </script>
</body>
</html>